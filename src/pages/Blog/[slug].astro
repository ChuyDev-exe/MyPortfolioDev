---
import type { GetStaticPaths } from 'astro';
import { getCollection } from 'astro:content';
import BlogLayout from '../../layouts/BlogLayout.astro';
import NavItem from '../../components/NavItem.astro';

export const getStaticPaths = (async () => {
  const Posts = await getCollection('posts')
  return Posts.map((post) => ({
    params: { slug: post.slug},
    props: { post: post },
  }));
}) satisfies GetStaticPaths;

const { post } = Astro.props;
const frontmatter = post.data;

const { Content, headings } = await post.render();


const groupedHeadings = headings.reduce((acc, heading, index) => {
  if (heading.depth === 1 || heading.depth === 2) {
    acc.push({
      ...heading,
      index: index + 1,
      children: []
    });
  } else if (acc.length > 0) {
    acc[acc.length - 1].children.push({
      ...heading,
      index: index + 1
    });
  }
  return acc;
}, [] as any[]);
---

<BlogLayout title={frontmatter.title}>
  <!-- Navigation -->
  <nav class="flex gap-2 sm:gap-5 flex-row justify-center items-center w-full py-8 sm:py-12 px-2 sm:px-4">
    <NavItem title="Blog Home" href="/DevBlog" />
    <NavItem title="All Posts" href="/Blog/Posts" />
    <NavItem title="Portfolio" href="https://jesusvelez.xyz" />
  </nav>

  <!-- Article Header -->
  <article class="mx-auto">
    <header class="mb-12 sm:mb-16 text-center max-w-5xl mx-auto px-2 sm:px-6">
      <!-- Category/Tags -->
      {frontmatter.tags && (
        <div class="flex flex-wrap justify-center gap-2 sm:gap-3 mb-4 sm:mb-6">
          {frontmatter.tags.map((tag: string) => (
            <span class="p-1.5 text-xxs sm:text-sm font-medium rounded-lg bg-blue-900 text-slate-200 ">
              {tag}
            </span>
          ))}
        </div>
      )}
      
      <!-- Title -->
      <h1 class="text-1xl sm:text-3xl md:text-4xl lg:text-6xl xl:text-7xl font-bold text-white mb-6 sm:mb-8   ">
        {frontmatter.title}
      </h1>
      
      <!-- Subtitle/Description -->
      {frontmatter.description && (
        <p class="text-base sm:text-lg md:text-xl text-white mb-6 sm:mb-8 max-w-4xl mx-auto px-1">
          {frontmatter.description}
        </p>
      )}
      
      <!-- Meta Information -->
      <div class="flex flex-roe flex-wrap items-center justify-center gap-3 sm:gap-8 text-sm sm:text-base text-gray-500 px-1">
        {frontmatter.author && (
          <div class="flex items-center gap-2 sm:gap-3">
            <svg class="w-4 h-4 sm:w-5 sm:h-5" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"/>
            </svg>
            <span class="font-medium">{frontmatter.author}</span>
          </div>
        )}
        

      </div>
      
      <!-- Divider -->
      <div class="w-24 sm:w-32 h-1 bg-gradient-to-r from-blue-500 to-cyan-500 mx-auto mt-8 sm:mt-12"></div>
    </header>
    <div class="flex flex-col xl:flex-row gap-8 sm:gap-12 lg:gap-20 px-2 sm:px-6">
      {/* Left Sidebar - Table of Contents with Dropdowns */}
      {groupedHeadings.length > 0 && (
      <aside class="w-full xl:w-2/5 xl:max-w-md mb-8 xl:mb-0">
        <div class="sticky top-8 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-xl sm:rounded-2xl p-6 sm:p-8 border border-gray-200 dark:border-gray-700 shadow-lg">
        <h3 class="text-xl sm:text-2xl font-semibold text-gray-900 dark:text-white mb-6 sm:mb-8 flex items-center gap-3 sm:gap-4">
          <svg class="w-6 h-6 sm:w-7 sm:h-7 text-blue-500" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"/>
          </svg>
          <span class="text-base sm:text-lg">Contenidos</span>
        </h3>
        <nav>
          <div class="space-y-2 sm:space-y-3">
          {groupedHeadings.map((heading) => (
            <div class="toc-item">
            <div class="flex items-center">
              <a 
              href={`#${heading.slug}`}
              class="flex-1 text-base sm:text-lg text-gray-300 hover:text-blue-400 transition-colors duration-200 py-3 sm:py-4 rounded-lg sm:rounded-xl hover:bg-gray-700/50 px-4 sm:px-6 font-medium"
              >
              <span class="text-base sm:text-lg leading-relaxed">{heading.text}</span>
              </a>
              {heading.children.length > 0 && (
              <button 
                class="dropdown-toggle p-2 sm:p-3 text-gray-400 hover:text-gray-200 hover:bg-gray-700 rounded-md sm:rounded-lg transition-colors"
                onclick="toggleDropdown(this)"
              >
                <svg class="w-4 h-4 sm:w-5 sm:h-5 transform transition-transform" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"/>
                </svg>
              </button>
              )}
            </div>
            {heading.children.length > 0 && (
              <div class="dropdown-content hidden ml-4 sm:ml-6 mt-2 space-y-1.5">
              {heading.children.map((subHeading: any) => (
                <a 
                href={`#${subHeading.slug}`}
                class="block text-sm text-gray-400 hover:text-blue-400 transition-colors duration-200 py-1.5 sm:py-2 px-3 sm:px-4 rounded-md sm:rounded-lg hover:bg-gray-700/50"
                style={`margin-left: ${(subHeading.depth - 3) * 0.5}rem`}
                >
                {subHeading.text}
                </a>
              ))}
              </div>
            )}
            </div>
          ))}
          </div>
        </nav>
        </div>
      </aside>
      )}
      
      {/* Main Content */}
      <main class={`flex-1 ${groupedHeadings.length > 0 ? 'xl:ml-8' : ''} max-w-none xl:max-w-4xl xl:pr-12`}>
      <article class="prose prose-base sm:prose-lg max-w-none prose-invert mx-auto px-4 sm:px-6">
        <Content/>
      </article>

      {/* Comments Section */}
      <section class="mt-16 sm:mt-20 pt-8 sm:pt-12 border-t border-gray-200 dark:border-gray-700">
        <div class="space-y-8 sm:space-y-10">
        </div>
        {/* Add Comment Form */}
        <div class="mt-8 sm:mt-10 bg-white dark:bg-gray-800 rounded-xl p-6 sm:p-8 border border-gray-200 dark:border-gray-700">
        <h3 class="text-base sm:text-lg font-semibold text-gray-900 dark:text-white mb-4 sm:mb-6">
          Deja un comentario
        </h3>
        <form class="space-y-4 sm:space-y-5">
          <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-5">
          <input
            type="text"
            placeholder="Tu nombre"
            class="w-full px-3 sm:px-4 py-2 sm:py-3 text-sm sm:text-base border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
          />
          <input
            type="email"
            placeholder="Tu email"
            class="w-full px-3 sm:px-4 py-2 sm:py-3 text-sm sm:text-base border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400"
          />
          </div>
          <textarea
          rows="4"
          placeholder="Escribe tu comentario..."
          class="w-full px-3 sm:px-4 py-2 sm:py-3 text-sm sm:text-base border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 resize-none"
          ></textarea>
          <button
          type="submit"
          class="inline-flex items-center gap-2 sm:gap-3 px-4 sm:px-6 py-2 sm:py-3 bg-blue-600 hover:bg-blue-700 text-white text-sm sm:text-base rounded-lg transition-colors duration-200 font-medium"
          >
          <svg class="w-4 h-4 sm:w-5 sm:h-5" fill="currentColor" viewBox="0 0 20 20">
            <path d="M10.894 2.553a1 1 0 00-1.788 0l-7 14a1 1 0 001.169 1.409l5-1.429A1 1 0 009 15.571V11a1 1 0 112 0v4.571a1 1 0 00.725.962l5 1.428a1 1 0 001.17-1.408l-7-14z"/>
          </svg>
          Publicar comentario
          </button>
        </form>
        </div>
      </section>
      </main>
    </div>
    <footer class="mt-16 sm:mt-24 pt-8 sm:pt-12 border-t border-gray-200 dark:border-gray-700 px-2 sm:px-6">


      <div class="flex flex-col sm:flex-row justify-between items-center gap-4 sm:gap-6 py-6 sm:py-8">
        <a
          href="/Blog/Posts"
          class="inline-flex items-center gap-2 sm:gap-3 px-6 sm:px-8 py-3 sm:py-4 bg-gray-100 hover:bg-gray-200 dark:bg-gray-800 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300 text-sm sm:text-base rounded-lg sm:rounded-xl transition-all duration-200 shadow-lg hover:shadow-xl font-medium"
        >
          <svg class="w-4 h-4 sm:w-5 sm:h-5" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd"/>
          </svg>
          Ver todos los posts
        </a>
        
        <a
          href="/DevBlog"
          class="inline-flex items-center gap-2 sm:gap-3 px-6 sm:px-8 py-3 sm:py-4 bg-blue-600 hover:bg-blue-700 text-white text-sm sm:text-base rounded-lg sm:rounded-xl transition-all duration-200 shadow-lg hover:shadow-xl font-medium"
        >
          Volver al Blog
          <svg class="w-4 h-4 sm:w-5 sm:h-5" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"/>
          </svg>
        </a>
      </div>
    </footer>
  </article>
</BlogLayout>

<script>
  // Dropdown functionality for TOC
  function toggleDropdown(button: HTMLElement) {
    const content = button.parentElement?.parentElement?.querySelector('.dropdown-content') as HTMLElement;
    const icon = button.querySelector('svg') as SVGElement;
    
    if (content && content.classList.contains('hidden')) {
      content.classList.remove('hidden');
      if (icon) icon.style.transform = 'rotate(180deg)';
    } else if (content) {
      content.classList.add('hidden');
      if (icon) icon.style.transform = 'rotate(0deg)';
    }
  }

  // Make toggleDropdown globally available
  (window as any).toggleDropdown = toggleDropdown;

  // Smooth scrolling for table of contents links
  document.addEventListener('DOMContentLoaded', function() {
    const tocLinks = document.querySelectorAll('a[href^="#"]');
    
    tocLinks.forEach(link => {
      link.addEventListener('click', function(e) {
        e.preventDefault();
        const href = (e.currentTarget as HTMLAnchorElement)?.getAttribute('href');
        const target = href ? document.querySelector(href) : null;
        if (target) {
          target.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      });
    });

    // Highlight current section in TOC
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        const id = entry.target.getAttribute('id');
        const tocLink = document.querySelector(`a[href="#${id}"]`);
        
        if (entry.isIntersecting && tocLink) {
          // Remove active class from all TOC links
          document.querySelectorAll('a[href^="#"]').forEach(link => {
            link.classList.remove('text-blue-600', 'dark:text-blue-400', 'font-semibold', 'bg-blue-50', 'dark:bg-blue-900');
          });
          
          // Add active class to current link
          tocLink.classList.add('text-blue-600', 'dark:text-blue-400', 'font-semibold', 'bg-blue-50', 'dark:bg-blue-900');
        }
      });
    }, {
      rootMargin: '-20% 0% -35% 0%'
    });

    // Observe all headings
    document.querySelectorAll('h1, h2, h3, h4, h5, h6').forEach(heading => {
      if (heading.id) {
        observer.observe(heading);
      }
    });

    // Auto-open TOC dropdowns that contain the current active section
    const activeLinks = document.querySelectorAll('.toc-item a[href^="#"]');
    activeLinks.forEach(link => {
      link.addEventListener('click', () => {
        const tocItem = link.closest('.toc-item');
        const dropdown = tocItem?.querySelector('.dropdown-content');
        const toggle = tocItem?.querySelector('.dropdown-toggle');
        
        if (dropdown && !dropdown.classList.contains('hidden')) {
          // Keep dropdown open if it contains the clicked link
        }
      });
    });
  });
</script>

